import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
from scipy.optimize import curve_fit
from datetime import datetime  
from datetime import timedelta 
from scipy.optimize import fsolve
%matplotlib inline

confirmed_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"

deaths_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"

recovered_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"

def clean_US(url):
    data = pd.read_csv(url)
    data = data.drop(['Lat','Long','Province/State'], axis = 1)
    US = data['Country/Region'] == 'US'
    data = data[US]
    data.dropna()
    data = data.drop(['Country/Region'],axis = 1)
    data = data.sum()
    return data
 
# Reported confirmed,deaths, and recovered cases in the U.S.
# This model's main assumption is human intervention. 

confirmed = clean_US(confirmed_url)
deaths = clean_US(deaths_url)
recovered = clean_US(recovered_url)
day = np.arange(len(confirmed))

# Variables: M = Carrying Capacity. k = Infection Rate. t_star = Day of inflection point.
def logistic_model(t,k,t_star,M):
    return (M)/(1+np.exp(-(t-t_star)/k))
    
def infect(function, x, y, z):
    t0 = "01/22/20"
    Date = datetime.strptime(t0, "%m/%d/%y")
    
    # Function will return rate of change, t* & carrying capacity
    fit = curve_fit(function, x, y)
    param = fit[0]
    cov = fit[1]
    rate = param[0]
    t_star = param[1]
    carry_cap = param[2]
    errors = [np.sqrt(cov[i][i]) for i in [0,1,2]]
    
    mortality_rate = (z[-1])/(y[-1])
    exp_deaths = mortality_rate * carry_cap

    print("The current infected population is", int(confirmed[-1]))
    print("The current mortality rate is", int(mortality_rate*100),"%")
    
    # Printing out the data
    t_starDate = Date + timedelta(days= t_star)
    print("The infection rate is", round(rate,0),"with the standard error of", round(errors[0],3))
    print("The date with the highest infection rate",t_starDate, "with the standard error of", round(errors[1],3))
    print("The estimated carrying capacity is", int(carry_cap),"people with the standard error of", round(errors[2],3))
    
    # Predicting tomorrow's infections & deaths
    tomorrow = t_star + 1
    exp_inf = logistic_model(tomorrow, rate, t_star, carry_cap)
    print("The estimated total number of infections for the following day is", int(exp_inf), "people")
    
    tmr_exp_inf = exp_inf - y[-1]
    tmr_exp_deaths = int(mortality_rate * tmr_exp_inf)
    print("The estimated number of deaths for the following day is", tmr_exp_deaths, "people")
        
    # Solving & predicting the end date
    sol = int(fsolve(lambda x : logistic_model(x,rate,t_star,carry_cap) - int(carry_cap), t_star))
    EndDate = Date + timedelta(days= sol)
    EndDate_MR = (exp_deaths/carry_cap)*100
    
    # Plotting the rest of the logistic curve
    pred_x = list(range(max(x),sol))
    plt.figure(figsize=(6, 6))

    # Real data
    plt.scatter(x, y ,label = "Real Data", color = "r")
    z = list(x) + pred_x

    # Predicted logistic curve
    plt.scatter(tomorrow, exp_inf, linewidth = 1, color = 'k', label = "Tomorrow's Prediction")
    plt.plot(z, [logistic_model(i,rate,t_star,carry_cap) for i in z], linestyle = '--', lw = 2, 
             label = "Logistic Model")
    plt.title("COVID-19 Logistic Curve in U.S")
    plt.legend(fontsize = 12)
    plt.xlabel("Days since Jan 22nd 2020", fontsize = 12)
    plt.ylabel("Total number of infected people", fontsize = 12)
    plt.ylim((min(y),carry_cap*1.1))
    plt.show()
    print("The expected end date is", EndDate)
    print("The expected number of deaths is", int(exp_deaths))
    print("The expected end date mortality rate is", round(EndDate_MR,2),"%")
    
   #Calling the function
   infect(logistic_model, day, confirmed, deaths)
